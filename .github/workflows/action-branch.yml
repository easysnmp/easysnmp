name: action-build
on:
  push:
    branches:
      - 'master'
      - 'actions-test'
  pull_request:
    branches:
      - 'master'
      - 'actions'

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
    steps:
      - name: Set up dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]
          then
            sudo apt-get install snmpd libsnmp-dev libperl-dev snmp-mibs-downloader
            sudo systemctl stop snmpd
            sudo download-mibs
          elif [ "$RUNNER_OS" == "macOS" ]
          then
            brew install easysnmp/netsnmp-easysnmp/net-snmp
            echo 'export PATH="/usr/local/opt/net-snmp/bin:$PATH"' >> /Users/runner/.bash_profile
            export PATH="/usr/local/opt/net-snmp/bin:$PATH"
            echo 'export PATH="/usr/local/opt/net-snmp/sbin:$PATH"' >> /Users/runner/.bash_profile
            export PATH="/usr/local/opt/net-snmp/sbin:$PATH"
          else
            echo "$RUNNER_OS not currently supported"
            exit 1
          fi
          mkdir -m 0755 ~/.snmp
          echo 'mibs +ALL' > ~/.snmp/snmp.conf
        shell: bash
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ "${{ matrix.python-version }}" =~ "2.7" ]]
          then
            pip install pytest wheel six
          else
            pip install flake8 pytest pytest-flake8 pytest-cov wheel
          fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build source
        run: |
          python setup.py build
          pip install -e .
      - name: Start SNMP daemon
        run: |
          if [ "$RUNNER_OS" == "Linux" ]
          then
            mibdir="-M +/var/lib/snmp/mibs"
            SNMPD=$(which snmpd)
          elif [ "$RUNNER_OS" == "macOS" ]
          then
            mibdir=""
            SNMPD=/usr/local/opt/net-snmp/sbin/snmpd
          else
            mibdir=""
            SNMPD=$(which.exe snmpd)
          fi
          $SNMPD -C -c tests/snmpd.conf -r -Le $mibdir -m ALL
      - name: Lint with flake8
        uses: py-actions/flake8@v2
        continue-on-error: true
      - name: Run tests
        run: |
          if [[ "${{ matrix.python-version }}" =~ "2.7" ]]
          then
            PYTEST_ARGS=( '-c' './setup-py2.7.cfg' )
          fi
          python -m pytest ${PYTEST_ARGS[@]} --junitxml=test-results_${{ matrix.os }}_${{ matrix.python-version }}.xml | tee ./test-outputs_${{ matrix.os }}_${{ matrix.python-version }}.log
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results
          path: |
            test-results_*.xml
            test-outputs_*.log
      - name: Generate wheel
        run: python setup.py bdist_wheel
      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

  comment-coverage:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download pytest artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          path: ./pytest-results
          name: pytest-results
      - name: Create mutli-file output listing
        run: |
          echo 'pytest_multiple_files<<EOF' >> $GITHUB_ENV
          export test_xml=($(ls -d ${{ steps.download.outputs.download-path }}/*.xml | sort ))
          export test_log=($(ls -d ${{ steps.download.outputs.download-path }}/*.log | sort ))
          for i in "${!test_log[@]}"
          do
            echo "$(echo ${test_log[$i]} | cut -d_ -f2) - $(echo ${test_log[$i]%.*} | cut -d_ -f3), ${test_log[$i]}, ${test_xml[$i]}" >> $GITHUB_ENV
          done
          echo 'EOF' >> $GITHUB_ENV
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          title: Pytest Coverage Report
          hide-badge: true
          hide-report: true
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          multiple-files: |
            ${{ env.pytest_multiple_files }}
